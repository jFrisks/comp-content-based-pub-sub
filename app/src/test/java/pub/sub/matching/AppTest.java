/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pub.sub.matching;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;
import static pub.sub.matching.App.isolatedEvaluationOfMatching;

class AppTest {
    @Test
    void test_linear_matching_success_1(){
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(),"linear");
        Set<Integer> oneMatchedLine = subList2IdSet(resultLinear.matchedSubs.get(98));
        Set<Integer> expected = new HashSet(Arrays.asList(6181, 7168, 10578, 12067, 15249, 15504, 18877));
        assertEquals(expected, oneMatchedLine, "Expected to match differently");
    }

    @Test
    void test_linear_matching_success_2(){
        Config config = Config.configTest();
        config.NBR_SUBS = 30000;
        Result resultLinear = isolatedEvaluationOfMatching(config, "linear");
        Set<Integer> oneMatchedLine = subList2IdSet(resultLinear.matchedSubs.get(96));
        Set<Integer> expected = new HashSet(Arrays.asList(1119, 1539, 2029, 5344, 5531, 6669, 7242, 7281, 7642, 8847, 9684, 13246, 13780, 15020, 16318, 18417, 19353, 20527, 22883, 24962, 25048, 26595, 26970, 28337, 29444));
        assertEquals(expected, oneMatchedLine, "Expected to match differently");
    }

    @Test
    void test_linear_matching_success_3(){
        Result resultLinear1 = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Result resultLinear2 = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear1, expected);
        listList2SetSet(resultLinear2, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_GEMTree_matching_success_1(){
        Result resultGEM = isolatedEvaluationOfMatching(Config.configTest(), "gem");
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Set<Integer> oneMatchedLine = subList2IdSet(resultGEM.matchedSubs.get(96));
        Set<Integer> expectedLine = subList2IdSet(resultLinear.matchedSubs.get(96));
        assertEquals(expectedLine, oneMatchedLine, "Expected to match differently");
    }

    @Test
    void test_GEMTree_matching_success_2(){
        Result resultLinear = isolatedEvaluationOfMatching(Config.configDebug(), "linear");
        Result resultGEM = isolatedEvaluationOfMatching(Config.configDebug(), "gem");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultGEM, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_GEMTree_matching_success_3(){
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Result resultGEM = isolatedEvaluationOfMatching(Config.configTest(), "gem");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultGEM, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_GEMTree_UnRanked_matching_success_1(){
        Result resultGEM = isolatedEvaluationOfMatching(Config.configTest(), "gemUnRanked");
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Set<Integer> oneMatchedLine = subList2IdSet(resultGEM.matchedSubs.get(96));
        Set<Integer> expectedLine = subList2IdSet(resultLinear.matchedSubs.get(96));
        assertEquals(expectedLine, oneMatchedLine, "Expected to match differently");
    }

    @Test
    void test_GEMTree_UnRanked_matching_success_2(){
        Result resultLinear = isolatedEvaluationOfMatching(Config.configDebug(), "linear");
        Result resultGEM = isolatedEvaluationOfMatching(Config.configDebug(), "gemUnRanked");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultGEM, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_GEMTree_UnRanked_matching_success_3(){
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Result resultGEM = isolatedEvaluationOfMatching(Config.configTest(), "gemUnRanked");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultGEM, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_MAEMA_matching_success_1(){
        Result resultMAEMA = isolatedEvaluationOfMatching(Config.configTest(), "maema");
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Set<Integer> oneMatchedLine = subList2IdSet(resultMAEMA.matchedSubs.get(96));
        Set<Integer> expectedLine = subList2IdSet(resultLinear.matchedSubs.get(96));
        assertEquals(expectedLine, oneMatchedLine, "Expected to match differently");
    }

    @Test
    void test_MAEMA_matching_success_2(){
        Result resultLinear = isolatedEvaluationOfMatching(Config.configDebug(), "linear");
        Result resultMAEMA = isolatedEvaluationOfMatching(Config.configDebug(), "maema");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultMAEMA, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_MAEMA_matching_success_3(){
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Result resultMAEMA = isolatedEvaluationOfMatching(Config.configTest(), "maema");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultMAEMA, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

 /*   @Test
    void test_REIN_matching_success_1(){
        Result resultREIN = runMatchingOnAlgo(Config.configTest(), "rein");
        Result resultLinear = runMatchingOnAlgo(Config.configTest(), "linear");
        Set<Integer> oneMatchedLine = subList2IdSet(resultREIN.matchedSubs.get(96));
        Set<Integer> expectedLine = subList2IdSet(resultLinear.matchedSubs.get(96));
        assertEquals(expectedLine, oneMatchedLine, "Expected to match differently");
    }

    @Test
    void test_REIN_matching_success_2(){
        Result resultREIN = runMatchingOnAlgo(Config.configDebug(), "rein");
        Result resultLinear = runMatchingOnAlgo(Config.configDebug(), "linear");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultREIN, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_REIN_matching_success_3(){
        Result resultREIN = runMatchingOnAlgo(Config.configTest(), "rein");
        Result resultLinear = runMatchingOnAlgo(Config.configTest(), "linear");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultREIN, actual);
        assertEquals(expected, actual, "Expected to match differently");
    } */

    @Test
    void test_AVDDM_matching_success_1(){
        Result resultAVDDM = isolatedEvaluationOfMatching(Config.configTest(), "avddm");
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Set<Integer> oneMatchedLine = subList2IdSet(resultAVDDM.matchedSubs.get(96));
        Set<Integer> expectedLine = subList2IdSet(resultLinear.matchedSubs.get(96));
        assertEquals(expectedLine, oneMatchedLine, "Expected to match differently");
    }

    @Test
    void test_AVDDM_matching_success_2(){
        Result resultAVDDM = isolatedEvaluationOfMatching(Config.configDebug(), "avddm");
        Result resultLinear = isolatedEvaluationOfMatching(Config.configDebug(), "linear");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultAVDDM, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    @Test
    void test_AVDDM_matching_success_3(){
        Result resultAVDDM = isolatedEvaluationOfMatching(Config.configTest(), "avddm");
        Result resultLinear = isolatedEvaluationOfMatching(Config.configTest(), "linear");
        Set<Set<Integer>> expected = new HashSet<>();
        Set<Set<Integer>> actual = new HashSet<>();
        listList2SetSet(resultLinear, expected);
        listList2SetSet(resultAVDDM, actual);
        assertEquals(expected, actual, "Expected to match differently");
    }

    private void listList2SetSet(Result result, Set<Set<Integer>> resultSet) {
        for (List<Subscription> ls : result.matchedSubs){
            resultSet.add(subList2IdSet(ls));
        }
    }

    private Set<Integer> subList2IdSet(List<Subscription> subscriptions){
        return subscriptions.stream().map(subscription -> subscription.id).collect(Collectors.toSet());
    }
}
